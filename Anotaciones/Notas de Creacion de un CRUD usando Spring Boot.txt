Creacion de un CRUD usando Spring Boot con MySql + Thymeleaf y Bootstrap

1- Crear projecto:
	tipo :[spirng starter Project]
	nombre : CRUD en Springt Boot
2- seleccionar estas dependencias:
	-Spring Data Jpa
	-Thymeleaf
	-Spring Web
	-Spring Boot DevTools
	-MySQL Driver
	*significado de las dependencia al final de la hoja.*

3- Crear Base de datos [db-crud-springboot].
4- crear la conexion a la base de datos con el proyecto usando el archivo application.propierties
	*mas detalles abajo*
5- Crea un nuevo 'package' con el nombre [entidad].
6- crea una clase [Estudiante].
	Esta clase se le agregara las anotaciones {@Entity | @Table(name="estudiantes")}

	A)crea las variables que haran las representaciones de las columnas en la tabla de la base de datos
	
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
	
		@Column(name = "nombre",nullable = false, length=50)
		private String nombre;
	
		@Column(name = "apellido",nullable = false, length=50)
		private String apellido;
	
		@Column(name = "email",nullable = false, length=50, unique =true)
		private String email;
		(!!!Habra una seccion donde se explicara el uso y la descripcion de las anotaciones
		utilizadas ||#7.1||)
	B)Se crean los constructores... 
		uno vacio y otro
		(Explicacion de Constructores ||#7.2||)

	C) se generan los [setter y getter] de todos
	

8- Crea un nuevo Package [servicio] esta sera para las interfaces.
9- Crea un archivo INTERFACE [EstudianteServicio]
	a) creamos una variable public del tipo "List" (java.utils) que importe la clase Estudiante:| List<Estudiante> | con el nombre de listarTodosLosEstudiantes();
10-Crea una clase en la package de [servicio], llamada [listarTodosLosEstudiantesImpl]. El "Impl" es por implement ya que esta sera una clase que implementara de [EstudianteServicio].
	-para indicar que esto se guarde en la fabrica de Spring le ponemos la anotacion de "@Service" ya que este sera el servicio. Luego implemntamos todos los metodos de la interface [EstudianteServicio]. 
	-al implmentar los metodos de [EstudianteServicio] se creara automaticamente metodo con la anotacion "Override" asi :

	@Override
	public List<Estudiante> listarTodosLosEstudiantes() {
		// TODO Auto-generated method stub
		return null;
	}

11- Crea un nuevo Package [repositorio] esta sera para los Repositorios.
12- crea una Interface [EstudianteRepositorio] y le agregamos la anotacion "@Repository". tambien le decimos a la interface que va heredar "extends" de {JpaRepository<T, ID>}
 	procedemos la "T2 por la clase [Estudiante] y "ID" por el tipo de datos que contiene nuestro "id" que es |Long|{JpaRepository<Estudiante, Long>}.

13- volvemos a [listarTodosLosEstudiantesImpl] e inyectamos el repositorio [EstudianteRepositorio]. con la anotacio "@Autowired" y creamos |private EstudianteRepositorio repositorio;|

14- Tomando la implentacion de {listarTodosLosEstudiantes()} cambiaremos el null (return null;) por un (return repositorio.findAll();)
	-| findAll();| Este método se utiliza para recuperar todos los registros [Estudiantes] almacenados en la tabla correspondiente en la base de datos.

15-Crea un nuevo Package [ controlador ].
16- crea una clase [ EstudianteControlador ] le agregas la anotacion "@Controller".
17- creamos un "@AutoWired" de [EstudianteServicio] con nombre (servicio).
18- creamos un metodos publico del tipo 'String' a este lo llamaremos (listarEstudiantes) con una petiocion Get utilizando la anotacion "@GetMapping" y URL "/estudiantes" o otra.
	Todo esto con un |return "estudiantes"| para que nos retorna un archivo HTML con el mismo nombre.
	
	18.1- se le agregara el argumento (Model modelo) de "import org.springframework.ui.Model;" .
	-El argumento modelo es un objeto de tipo Model proporcionado por Spring MVC. El modelo es una estructura de datos que se utiliza para pasar información desde el
	 controlador a la vista (plantilla HTML) que se va a renderizar y presentar al usuario.

	18.2- se utilizara la variable "modelo" y luego se llamara al metodo "addAttribute" de (.addAttribute(String attributeName, @Nullable Object attributeValue)).

	-El motodo deberia verse asi:
	
	@GetMapping({"/estudiantes","/"})
	public String  listarEstudiantes(Model modelo) {
		modelo.addAttribute("estudiante", servicio.listarTodosLosEstudiantes());
		return "estudiantes";//Nos retorna al achivo estudiantes
	}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
||#2#||
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Explicacion de las dependencias utilizadas en este proyecto.
// sobre de que son, para que se utlizan.

	Spring Data JPA:

Uso: Spring Data JPA es un módulo de Spring que simplifica el acceso y la manipulación 
de bases de datos relacionales utilizando JPA (Java Persistence API).

Descripción: Permite crear fácilmente repositorios y consultas basadas en métodos para interactuar 
con la base de datos. Abstrae gran parte de la lógica de acceso a datos y facilita la implementación de 
operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sin la necesidad de escribir consultas SQL personalizadas.

	Thymeleaf:

Uso: Thymeleaf es un motor de plantillas para generar vistas HTML en aplicaciones web de Spring Boot.

Descripción: Permite la integración de plantillas HTML con contenido dinámico utilizando sintaxis simple y legible. 
Thymeleaf se puede utilizar tanto en el lado del cliente (renderizado en el navegador) como en el lado del servidor 
(pre-renderizado en el servidor antes de enviar la respuesta al cliente).

	Spring Web:

Uso: Spring Web es un módulo que proporciona funcionalidades para desarrollar aplicaciones web en Spring Boot.

Descripción: Ofrece una amplia variedad de características para crear aplicaciones web, como el manejo de solicitudes HTTP, 
la creación de controladores y el soporte para la construcción de RESTful APIs. Esencialmente, es la base para construir aplicaciones web en Spring Boot.

	Spring Boot DevTools:

Uso: Spring Boot DevTools es una herramienta diseñada para mejorar la productividad en el desarrollo de aplicaciones Spring Boot.

Descripción: Proporciona diversas funcionalidades, como la reinicialización automática de la aplicación cuando se realizan cambios 
en el código fuente (live reload), la configuración automática de entornos de desarrollo, la habilitación de perfiles específicos, entre otras. 
Estas características facilitan el ciclo de desarrollo y la detección temprana de problemas.

	MySQL Driver:

Uso: El MySQL Driver es una dependencia que permite la conexión y comunicación con una base de datos MySQL desde una aplicación de Spring Boot.

Descripción: El driver actúa como un puente entre la aplicación y la base de datos MySQL, permitiendo enviar y recibir datos entre ambos. 
Es esencial para que la aplicación pueda interactuar con la base de datos MySQL específica que esté configurada.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

||#4#||
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Explicacion sobre la configuracion sobre la conexion a la base de datos con el proyecto en application.propierties
	
	-Esta es la configuracion de los propierties utilizando una bade datos en la nube:

	spring.datasource.url = jdbc:mysql://localhost:3306/registro_usuarios_sprintboot
	spring.datasource.username = root
	spring.datasource.password = 12345


	##Hibernate Properties
	# The SQL  dialet make Hibernate generate better SQL for chosen databse
	spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySql5InnoDBDialect

	# Hibernate dll auto (create, create-drop. validate, update)
	spring.jpa.hibernate.ddl-auto=update

	logging.level.org.hibernate.SQL=DEBUG
	logging.level.org.hibernate.type=TRACE

--Explicacion breve de cada linea para entender su funcionamiento y para que utilizan

	spring.datasource.url: 
Esta propiedad define la URL de conexión a la base de datos. En este caso, se utiliza el protocolo JDBC para conectarse a una base de datos MySQL.
La URL debe contener la información necesaria para acceder a la base de datos en la nube, como el host, puerto y nombre de la base de datos.

	spring.datasource.username:
Aquí se especifica el nombre de usuario para acceder a la base de datos. Es el nombre de usuario que se utilizará 
para autenticarse en el servidor de la base de datos.

	spring.datasource.password:
Esta línea contiene la contraseña que corresponde al nombre de usuario proporcionado. Es la contraseña que se utilizará 
para autenticar la conexión con el servidor de la base de datos.

	spring.jpa.properties.hibernate.dialect:
Esta propiedad define el dialecto de SQL que usará Hibernate para generar consultas específicas del motor de base de datos.
 En este caso, se configura para utilizar el dialecto de MySQL.

	spring.jpa.hibernate.ddl-auto:
Esta línea configura la forma en que Hibernate manejará el esquema de la base de datos. En este caso, se establece en "update", 
lo que significa que Hibernate actualizará automáticamente la estructura de la base de datos para que coincida con las entidades (tablas) 
definidas en el código Java. Sin embargo, ten en cuenta que esta configuración está destinada para desarrollo, y en producción, es recomendable 
utilizar "validate" o "none" para evitar modificaciones accidentales de la estructura de la base de datos.

	logging.level.org.hibernate.SQL:
Esta propiedad configura el nivel de registro para las consultas SQL generadas por Hibernate. En este caso, se establece en "DEBUG", 
lo que significa que se registrarán las consultas SQL en el nivel de depuración.

	logging.level.org.hibernate.type:
Esta línea configura el nivel de registro para los parámetros de las consultas SQL generadas por Hibernate. En este caso, se establece en "TRACE", 
lo que significa que se registrarán los parámetros de las consultas SQL en el nivel de traza.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

||#7.1#|| Entidad Estudiante -->Entidades
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Las entidades en el contexto de Java y JPA (Java Persistence API) son clases que representan tablas de bases de datos y permiten mapear los datos
 almacenados en esas tablas a objetos de Java. En tu caso, has creado una entidad llamada "Estudiante" que representa la tabla "estudiantes" en la base de datos.

Vamos a describir el uso y significado de cada anotación y campo en la clase "Estudiante":

1. `@Entity`: Esta anotación marca la clase "Estudiante" como una entidad de JPA. Indica que esta clase se asociará con una tabla en la base de datos.

2. `@Table(name="estudiantes")`: Esta anotación especifica el nombre de la tabla en la base de datos con la que se mapeará la entidad "Estudiante".
	 En este caso, la tabla se llama "estudiantes".

3. `@Id`: Esta anotación marca el campo "id" como la clave primaria de la tabla. La clave primaria es un valor único que identifica de forma única cada registro en la tabla.

4. `@GeneratedValue(strategy = GenerationType.IDENTITY)`: Esta anotación especifica cómo se generará automáticamente el valor del campo "id" al insertar un nuevo registro en la tabla.
	 En este caso, se utiliza "GenerationType.IDENTITY", que generalmente se asocia con columnas de autoincremento en la base de datos. Cuando se inserta un nuevo registro,
	 la base de datos se encargará de asignar automáticamente un valor único al campo "id".

5. `@Column`: Esta anotación se utiliza para mapear el campo de la entidad a una columna en la tabla de la base de datos. Aquí, se definen varias propiedades para la columna:
   - `name = "nombre"`: El nombre de la columna en la tabla se establece como "nombre".
   - `nullable = false`: Indica que el campo "nombre" no puede contener valores nulos en la base de datos.
   - `length = 50`: Define la longitud máxima de caracteres que puede tener el campo "nombre".

6. `private String nombre;`: Este campo representa la columna "nombre" en la tabla "estudiantes". Es un atributo de tipo String que almacenará el nombre del estudiante.

7. `private String apellido;`: Este campo representa la columna "apellido" en la tabla "estudiantes". Es un atributo de tipo String que almacenará el apellido del estudiante.

8. `private String email;`: Este campo representa la columna "email" en la tabla "estudiantes". Es un atributo de tipo String que almacenará el correo electrónico del estudiante.
 La anotación `unique = true` garantiza que cada dirección de correo electrónico sea única en la tabla.

En resumen, la clase "Estudiante" es una entidad de JPA que representa la tabla "estudiantes" en la base de datos. Los campos de la clase se mapean a columnas en la tabla, y
 las anotaciones proporcionan información adicional sobre cómo se debe realizar el mapeo. Al utilizar JPA y Hibernate (un proveedor de JPA), puedes interactuar con la base de
 datos utilizando objetos Java, lo que facilita el desarrollo y mantenimiento de aplicaciones relacionales.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

||#7.2#|| Entidad Estudiante --> Constructores
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
La creación de dos constructores en la clase entidad, uno vacío y otro que acepta todas las variables, es una práctica común y puede tener varias razones:

1. **Requerimientos de JPA y Hibernate**: JPA y los proveedores de JPA, como Hibernate, necesitan un constructor vacío para instanciar las entidades cuando se recuperan de la base de datos.
 Sin un constructor vacío, JPA no podrá crear instancias de la clase y mapear los datos desde la base de datos. Por lo tanto, es obligatorio proporcionar un constructor sin argumentos.

2. **Facilitar la creación de instancias**: Proporcionar un constructor que acepte todas las variables facilita la creación de instancias de la entidad cuando se quieren insertar nuevos
 registros en la base de datos. Con un constructor que toma todas las variables, puedes crear objetos "Estudiante" y establecer todas sus propiedades de manera concisa en una sola línea de código.

3. **Inmutabilidad y Validaciones**: Si la clase entidad tiene atributos que no deberían cambiar después de la creación del objeto (por ejemplo, el "id" generado automáticamente),
 es posible marcar esos atributos como `final` y solo establecerlos a través del constructor. Esto garantiza la inmutabilidad de esos atributos y evita modificaciones accidentales.

4. **Uso de Builder o Patrón Factory**: Al proporcionar un constructor que acepta todas las variables, es más fácil implementar patrones como el patrón Builder o Factory. Estos patrones
 permiten una creación más flexible y estructurada de objetos complejos.

5. **Claridad y Legibilidad del Código**: Proporcionar ambos constructores puede mejorar la legibilidad del código y facilitar su comprensión para otros desarrolladores. Al tener ambas opciones,
 el código se vuelve más expresivo y claro sobre cómo se pueden crear instancias de la clase.

En resumen, al proporcionar un constructor vacío y otro que acepte todas las variables, aseguras que la clase entidad cumpla con los requisitos de JPA y facilita la creación de instancias de la entidad,
 al tiempo que permite mantener una estructura más clara y expresiva del código. Es una buena práctica seguir esta convención para asegurar la correcta interacción entre JPA y las entidades y
 para mejorar la legibilidad y mantenibilidad del código.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------